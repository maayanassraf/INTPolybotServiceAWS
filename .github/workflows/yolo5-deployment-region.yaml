name: Yolo5 Microservice Deployment

on:
  workflow_call:
    inputs:
      region-code:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      PRIVATE_KEY:
        required: true

jobs:
  Deploy:
    runs-on: ubuntu-latest
    needs:
      - Build

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2
      - name: Deploy new version
        env:
          AWS_DEFAULT_REGION: ${{ inputs.region-code }}
        run: |
          cd tf 
          # Gets from tfvars file the owner name
          OWNER=$(cat region.$AWS_DEFAULT_REGION.tfvars | grep owner |  grep -o '".*"' | sed 's/"//g')
          
          cd ..
          
          # create .env file with needed values.
          echo -e "BUCKET_NAME=tf-$OWNER-images-bucket-$AWS_DEFAULT_REGION
          SQS_QUEUE_NAME=tf-$OWNER-project-queue
          REGION_NAME=$AWS_DEFAULT_REGION
          DYNAMODB_TABLE=tf-$OWNER-predictions-dynamodb-table
          ALB_URL=$OWNER-polybot-$AWS_DEFAULT_REGION.int-devops.click:8443" | tr -d ' ' > .env
          
          cd yolo5
          
          # Allows running aws commands
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
          YOLO5_IMAGE=maayanassraf/yolo5-aws-project:${{ github.run_number }}

#          # Saves new user-data as base64 (includes new yolo5 image) for using in new launch template version
#
#          DATA_BASE64=$(echo -n "#!/bin/bash
#          # Add Docker's official GPG key:
#          sudo apt-get update
#          sudo apt-get install ca-certificates curl -y
#          install -m 0755 -d /etc/apt/keyrings
#          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
#          chmod a+r /etc/apt/keyrings/docker.asc
#
#          # Add the repository to Apt sources:
#          echo \
#            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
#            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
#            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#          sudo apt-get update
#
#          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
#
#          sudo usermod -a -G docker ubuntu
#          newgrp docker
#
#          docker run --restart always --name yolo5 $YOLO5_IMAGE" | base64)

          # Gets the last launch template version (for using as source version at new launch template
#          OLD_LT_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id lt-0d51076c34836cbcc \
#          --versions $Latest | jq '.LaunchTemplateVersions[] .VersionNumber' |  wc -l)
#          echo "The last launch template version is $OLD_LT_VERSION (before creating new launch template)"
#
#          # Creates new launch template, based on the last launch template exists.
#          aws ec2 create-launch-template-version --launch-template-id lt-0d51076c34836cbcc \
#          --source-version $OLD_LT_VERSION --launch-template-data "UserData=$DATA_BASE64"
#
#          # Gets the new launch template version
#          LT_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id lt-0d51076c34836cbcc \
#          --versions $Latest | jq '.LaunchTemplateVersions[] .VersionNumber' |  wc -l)
#          echo "The new launch template version is $LT_VERSION (after creating new launch template)"
#
#          # Sets the new launch template as default version
#          aws ec2 modify-launch-template --launch-template-id lt-0d51076c34836cbcc --default-version $LT_VERSION
#
#          # Starts an instance refresh for updating existing instances
#          aws autoscaling start-instance-refresh --auto-scaling-group-name maayana-yolo5-asg --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}'



